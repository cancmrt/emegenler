// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.FluentApis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FluentUserRoleFeature : Xunit.IClassFixture<FluentUserRoleFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FluentUserRole.feature"
#line hidden
        
        public FluentUserRoleFeature(FluentUserRoleFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FluentUserRole", "\tThis interface should easliy asssing user to role or should do vice versa\r\n\tShou" +
                    "ld Get UserRole entity with loaded Update and Delete functionality\r\n\tShould Take" +
                    " List of UserRole entites wih Loaded Update and Delete functionality to each one" +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateUser(identifier).ToRole(identifier) method interface should" +
            " add new relation beetween user identifier and role identifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateUser(identifier).ToRole(identifier) method interface should" +
            " add new relation beetween user identifier and role identifier")]
        [Xunit.TraitAttribute("Category", "AssociateUser-NormalCase")]
        public virtual void Api_UserRole_AssociateUserİdentifier_ToRoleİdentifierMethodİnterfaceShouldAddNewRelationBeetweenUserİdentifierAndRoleİdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateUser(identifier).ToRole(identifier) method interface should" +
                    " add new relation beetween user identifier and role identifier", null, new string[] {
                        "AssociateUser-NormalCase"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.When("We pass valid AssociateUser(identifier) and ToRole(identifier) to FLuentUserRole " +
                    "api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("FluentUserRole api should not throw exception on valid AssociateUser(identifier) " +
                    "and ToRole(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateRole(identifier).ToUser(identifier) method interface should" +
            " add new relation beetween user identifier and role identifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateRole(identifier).ToUser(identifier) method interface should" +
            " add new relation beetween user identifier and role identifier")]
        [Xunit.TraitAttribute("Category", "AssociateRole-NormalCase")]
        public virtual void Api_UserRole_AssociateRoleİdentifier_ToUserİdentifierMethodİnterfaceShouldAddNewRelationBeetweenUserİdentifierAndRoleİdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateRole(identifier).ToUser(identifier) method interface should" +
                    " add new relation beetween user identifier and role identifier", null, new string[] {
                        "AssociateRole-NormalCase"});
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 12
 testRunner.When("We pass valid AssociateRole(identifier) and ToUser(identifier) to FLuentUserRole " +
                    "api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("FluentUserRole api should not throw exception on valid AssociateRole(identifier) " +
                    "and ToUser(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateUser(Empty).ToRole(identifier) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateUser(Empty).ToRole(identifier) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("Category", "AssociateUser-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateUserEmpty_ToRoleİdentifierMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateUser(Empty).ToRole(identifier) method interface should thro" +
                    "w exception", null, new string[] {
                        "AssociateUser-ExceptionalCase"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
 testRunner.When("We pass not valid AssociateUser(Empty) and valid ToRole(identifier) to FluentUser" +
                    "RoleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateUser(Empty) and T" +
                    "oRole(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateUser(null).ToRole(identifier) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateUser(null).ToRole(identifier) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("Category", "AssociateUser-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateUserNull_ToRoleİdentifierMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateUser(null).ToRole(identifier) method interface should throw" +
                    " exception", null, new string[] {
                        "AssociateUser-ExceptionalCase"});
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
 testRunner.When("We pass not valid AssociateUser(null) and valid ToRole(identifier) to FluentUserR" +
                    "oleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateUser(null) and To" +
                    "Role(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateUser(identifier).ToRole(Empty) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateUser(identifier).ToRole(Empty) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("Category", "AssociateUser-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateUserİdentifier_ToRoleEmptyMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateUser(identifier).ToRole(Empty) method interface should thro" +
                    "w exception", null, new string[] {
                        "AssociateUser-ExceptionalCase"});
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
 testRunner.When("We pass not valid AssociateUser(identifier) and valid ToRole(Empty) to FluentUser" +
                    "RoleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateUser(identifier) " +
                    "and ToRole(Empty) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateUser(identifier).ToRole(null) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateUser(identifier).ToRole(null) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("Category", "AssociateUser-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateUserİdentifier_ToRoleNullMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateUser(identifier).ToRole(null) method interface should throw" +
                    " exception", null, new string[] {
                        "AssociateUser-ExceptionalCase"});
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 30
 testRunner.When("We pass not valid AssociateUser(identifier) and valid ToRole(null) to FluentUserR" +
                    "oleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateUser(identifier) " +
                    "and ToRole(null) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateRole(Empty).ToUser(identifier) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateRole(Empty).ToUser(identifier) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("Category", "AssociateRole-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateRoleEmpty_ToUserİdentifierMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateRole(Empty).ToUser(identifier) method interface should thro" +
                    "w exception", null, new string[] {
                        "AssociateRole-ExceptionalCase"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 36
 testRunner.When("We pass not valid AssociateRole(Empty) and valid ToUser(identifier) to FluentUser" +
                    "RoleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateRole(Empty) and T" +
                    "oUser(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateRole(null).ToUser(identifier) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateRole(null).ToUser(identifier) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("Category", "AssociateRole-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateRoleNull_ToUserİdentifierMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateRole(null).ToUser(identifier) method interface should throw" +
                    " exception", null, new string[] {
                        "AssociateRole-ExceptionalCase"});
#line 39
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 40
 testRunner.When("We pass not valid AssociateRole(null) and valid ToUser(identifier) to FluentUserR" +
                    "oleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateRole(null) and To" +
                    "User(identifier) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateRole(identifier).ToUser(Empty) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateRole(identifier).ToUser(Empty) method interface should thro" +
            "w exception")]
        [Xunit.TraitAttribute("Category", "AssociateRole-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateRoleİdentifier_ToUserEmptyMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateRole(identifier).ToUser(Empty) method interface should thro" +
                    "w exception", null, new string[] {
                        "AssociateRole-ExceptionalCase"});
#line 44
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 45
 testRunner.When("We pass not valid AssociateRole(identifier) and valid ToUser(Empty) to FluentUser" +
                    "RoleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateRole(identifier) " +
                    "and ToUser(Empty) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.UserRole.AssociateRole(identifier).ToUser(null) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "api.UserRole.AssociateRole(identifier).ToUser(null) method interface should throw" +
            " exception")]
        [Xunit.TraitAttribute("Category", "AssociateRole-ExceptionalCase")]
        public virtual void Api_UserRole_AssociateRoleİdentifier_ToUserNullMethodİnterfaceShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.UserRole.AssociateRole(identifier).ToUser(null) method interface should throw" +
                    " exception", null, new string[] {
                        "AssociateRole-ExceptionalCase"});
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 49
 testRunner.When("We pass not valid AssociateRole(identifier) and valid ToUser(null) to FluentUserR" +
                    "oleApi", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("FluentUserRole api should throw exception on not valid AssociateRole(identifier) " +
                    "and ToUser(null) passage on method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Count method when called return Count of UserRoleIdentifiers in EmegenlerTables f" +
            "rom RoleInterface")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentUserRole")]
        [Xunit.TraitAttribute("Description", "Count method when called return Count of UserRoleIdentifiers in EmegenlerTables f" +
            "rom RoleInterface")]
        [Xunit.TraitAttribute("Category", "Count-NormalCase")]
        public virtual void CountMethodWhenCalledReturnCountOfUserRoleIdentifiersİnEmegenlerTablesFromRoleInterface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count method when called return Count of UserRoleIdentifiers in EmegenlerTables f" +
                    "rom RoleInterface", null, new string[] {
                        "Count-NormalCase"});
#line 53
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 54
 testRunner.When("Count method called from UserRole interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("Count method should return Count of UserRoles in EmegenlerTables from UserRoleInt" +
                    "erface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FluentUserRoleFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FluentUserRoleFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

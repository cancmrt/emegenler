// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.FluentApis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FluentPolicyFeature : Xunit.IClassFixture<FluentPolicyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FluentPolicy.feature"
#line hidden
        
        public FluentPolicyFeature(FluentPolicyFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FluentPolicy", "\tThis class will do policy operation with fluent interface. Should create policy," +
                    " edit policy, delete policy and get policy and policies with using fluent interf" +
                    "ace", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToPageWithAccessGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to page with access granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 5
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddPage(typeof(FakeClass)).AccessGra" +
                    "nted(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToPageWithAccessDeniedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to page with access denied prop" +
                    "erty", null, new string[] {
                        "Create-NormalCase"});
#line 10
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddPage(typeof(FakeClass)).AccessDen" +
                    "ied(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessDenied(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToPageWithAccessGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to page with access granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 15
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddPage(typeof(FakeClass)).AccessGra" +
                    "nted(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToPageWithAccessDeniedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to page with access denied prop" +
                    "erty", null, new string[] {
                        "Create-NormalCase"});
#line 20
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddPage(typeof(FakeClass)).AccessDen" +
                    "ied(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessDenied(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToComponentWithShowProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to component with show property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 25
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddComponent(identifier).Show(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddComponent(identifier).Show(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToComponentWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to component with hide property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 29
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 30
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddComponent(identifier).Hide(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddComponent(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToComponentWithShowProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to component with show property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 34
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddComponent(identifier).Show(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddComponent(identifier).Show(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToComponentWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to component with hide property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 38
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 39
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddComponent(identifier).Hide(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddComponent(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 43
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 47
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 48
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 51
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 52
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 56
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 57
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 60
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 61
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 64
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with editable property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with editable property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithEditableProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with editable property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 69
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 70
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Editable(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Editable(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with readonly property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 73
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 77
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 78
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to to input with editable prope" +
            "rty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to to input with editable prope" +
            "rty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToToİnputWithEditableProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to to input with editable prope" +
                    "rty", null, new string[] {
                        "Create-NormalCase"});
#line 82
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 83
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Editable(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Editable(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToİnputWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to input with readonly property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 86
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToİnputWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to input with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 90
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 91
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with action granted p" +
                    "roperty", null, new string[] {
                        "Create-NormalCase"});
#line 95
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 96
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).ActionGranted(); c" +
                    "alled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with readonly propert" +
                    "y", null, new string[] {
                        "Create-NormalCase"});
#line 99
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 100
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).Readonly(); called" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 101
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 103
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 104
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with action granted p" +
                    "roperty", null, new string[] {
                        "Create-NormalCase"});
#line 108
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 109
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).ActionGranted(); c" +
                    "alled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 110
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with readonly propert" +
                    "y", null, new string[] {
                        "Create-NormalCase"});
#line 112
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 113
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).Readonly(); called" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 116
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 117
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 121
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 122
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 125
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 126
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 129
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 130
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 131
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 134
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 135
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 138
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 139
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 140
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 142
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 143
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty UserIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty UserIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyUserIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty UserIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 147
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 148
  testRunner.When("api.Policy.Create().WithUser().AddPage(typeof(FakeClass)).AccessGranted(); called" +
                    " on WithUser method with empty UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 149
  testRunner.Then("NullReferanceException throws by WithUser method with empty UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null UserIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null UserIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullUserIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null UserIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 151
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 152
  testRunner.When("api.Policy.Create().WithUser(null).AddPage(typeof(FakeClass)).AccessGranted(); ca" +
                    "lled on WithUser method with null UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
  testRunner.Then("NullReferanceException throws by WithUser method with null UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty RoleIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty RoleIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyRoleIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty RoleIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 155
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 156
  testRunner.When("api.Policy.Create().WithRole().AddPage(typeof(FakeClass)).AccessGranted(); called" +
                    " on WithRole method with empty RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
  testRunner.Then("NullReferanceException throws by WithRole method with empty RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null RoleIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null RoleIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullRoleIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null RoleIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 159
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 160
  testRunner.When("api.Policy.Create().WithRole(null).AddPage(typeof(FakeClass)).AccessGranted(); ca" +
                    "lled on WithRole method with null RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 161
  testRunner.Then("NullReferanceException throws by WithRole method with null RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null PageType")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null PageType")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullPageType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null PageType", null, new string[] {
                        "Create-ExceptionalCase"});
#line 164
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 165
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddPage(null).AccessGranted(); calle" +
                    "d on AddPage method with null PageType prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 166
  testRunner.Then("NullReferanceException throws by AddPage method with null PageType prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty ComponentIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty ComponentIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyComponentIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty ComponentIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 169
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 170
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddComponent().Show(); called on Add" +
                    "Component method with empty ComponentIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
  testRunner.Then("NullReferanceException throws by AddComponent method with empty ComponentIdentifi" +
                    "er prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null ComponentIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null ComponentIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullComponentIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null ComponentIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 173
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 174
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddComponent(null).Show(); called on" +
                    " AddComponent method with null ComponentIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
  testRunner.Then("NullReferanceException throws by AddComponent method with null ComponentIdentifie" +
                    "r prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty FormIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty FormIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyFormIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty FormIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 178
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 179
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddForm().ActionGranted(); called on" +
                    " AddForm method with empty FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 180
  testRunner.Then("NullReferanceException throws by AddForm method with empty FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null FormIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null FormIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullFormIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null FormIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 182
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 183
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddForm(null).ActionGranted(); calle" +
                    "d on AddForm method with null FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 184
  testRunner.Then("NullReferanceException throws by AddForm method with null FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty InputIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty InputIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyInputIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty InputIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 187
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 188
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddInput().Readonly(); called on Add" +
                    "Input method with empty InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
  testRunner.Then("NullReferanceException throws by AddInput method with empty InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null InputIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null InputIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullInputIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null InputIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 191
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 192
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddInput(null).Readonly(); called on" +
                    " AddForm method with null InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 193
  testRunner.Then("NullReferanceException throws by AddInput method with null InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty ButtonIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty ButtonIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyButtonIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty ButtonIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 196
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 197
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddButton().Readonly(); called on Ad" +
                    "dButton method with empty ButtonIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
  testRunner.Then("NullReferanceException throws by AddButton method with empty ButtonIdentifier pro" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null ButtonIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null ButtonIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullButtonIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null ButtonIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 200
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 201
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddButton(null).Readonly(); called o" +
                    "n AddButton method with null ButtonIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 202
  testRunner.Then("NullReferanceException throws by AddButton method with null ButtonIdentifier prop" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty LinkIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty LinkIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyLinkIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty LinkIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 205
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 206
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddLink().Readonly(); called on AddL" +
                    "ink method with empty LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 207
  testRunner.Then("NullReferanceException throws by AddLink method with empty LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null LinkIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null LinkIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullLinkIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null LinkIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 209
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 210
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddLink(null).Readonly(); called on " +
                    "AddLink method with null LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 211
  testRunner.Then("NullReferanceException throws by AddLink method with null LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
            "ty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
            "ty")]
        [Xunit.TraitAttribute("Category", "Get-NormalCase")]
        public virtual void GetMethodTakeValidPolicyIdAndMethodShouldReturnValidEmegelerPolicyEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
                    "ty", null, new string[] {
                        "Get-NormalCase"});
#line 213
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 214
 testRunner.When("We pass valid PolicyId to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 215
 testRunner.Then("Get method should return valid EmegelerPolicy entity from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take PolicyId with zero value and method throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take PolicyId with zero value and method throw exception")]
        [Xunit.TraitAttribute("Category", "Get-ExceptionalCase")]
        public virtual void GetMethodTakePolicyIdWithZeroValueAndMethodThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take PolicyId with zero value and method throw exception", null, new string[] {
                        "Get-ExceptionalCase"});
#line 217
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 218
 testRunner.When("We pass PolicyId with zero value to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("Get method should throw exception on PolicyId with zero value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take PolicyId with negative value and method throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take PolicyId with negative value and method throw exception")]
        [Xunit.TraitAttribute("Category", "Get-ExceptionalCase")]
        public virtual void GetMethodTakePolicyIdWithNegativeValueAndMethodThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take PolicyId with negative value and method throw exception", null, new string[] {
                        "Get-ExceptionalCase"});
#line 221
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 222
 testRunner.When("We pass PolicyId with negative value to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("Get method should throw exception on PolicyId with negative value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid Page and PageSize prop and method should return List of Po" +
            "licies")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid Page and PageSize prop and method should return List of Po" +
            "licies")]
        [Xunit.TraitAttribute("Category", "Take-NormalCase")]
        public virtual void TakeMethodTakeValidPageAndPageSizePropAndMethodShouldReturnListOfPolicies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid Page and PageSize prop and method should return List of Po" +
                    "licies", null, new string[] {
                        "Take-NormalCase"});
#line 226
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 227
 testRunner.When("We pass valid Page and PageSize prop on Take method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 228
 testRunner.Then("Take method should return List of EmegelerPolicy entites from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid Page but PageSize is less than one")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid Page but PageSize is less than one")]
        [Xunit.TraitAttribute("Category", "Take-ExceptionalCase")]
        public virtual void TakeMethodTakeValidPageButPageSizeİsLessThanOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid Page but PageSize is less than one", null, new string[] {
                        "Take-ExceptionalCase"});
#line 230
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 231
 testRunner.When("We pass valid Page prop but PageSize value is less than one to Take method from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("Take method should throw exception on when PageSize value is less than one from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid PageSize but Page is less than one")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid PageSize but Page is less than one")]
        [Xunit.TraitAttribute("Category", "Take-ExceptionalCase")]
        public virtual void TakeMethodTakeValidPageSizeButPageİsLessThanOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid PageSize but Page is less than one", null, new string[] {
                        "Take-ExceptionalCase"});
#line 234
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 235
 testRunner.When("We pass valid PageSize prop but Page value is less than one to Take method from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 236
 testRunner.Then("Take method should throw exception on when Page value is less than one from Fluen" +
                    "tPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
            "g to User")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
            "g to User")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-NormalCase")]
        public virtual void Api_Policy_Take_FromUserİdentifierMethodShouldGetListOfPoliciesBelongToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
                    "g to User", null, new string[] {
                        "Take.FromUser-NormalCase"});
#line 239
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 240
 testRunner.When("We pass valid identifier api.Policy().Take().FromUser(identifier) method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("api.Policy().Take().FromUser(identifier) should return List of Policies belong to" +
                    " User", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
            "g to Role")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
            "g to Role")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-NormalCase")]
        public virtual void Api_Policy_Take_FromRoleİdentifierMethodShouldGetListOfPoliciesBelongToRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
                    "g to Role", null, new string[] {
                        "Take.FromRole-NormalCase"});
#line 244
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 245
 testRunner.When("We pass valid identifier api.Policy().Take().FromRole(identifier) method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 246
 testRunner.Then("api.Policy().Take().FromRole(identifier) should return List of Policies belong to" +
                    " Role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(Empty) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(Empty) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromUserEmptyMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(Empty) method should throw exception", null, new string[] {
                        "Take.FromUser-ExceptionalCase"});
#line 249
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 250
 testRunner.When("We pass Empty value as User identifier to api.Policy().Take().FromUser(Empty) met" +
                    "hod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 251
 testRunner.Then("api.Policy().Take().FromUser(Empty) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(null) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(null) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromUserNullMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(null) method should throw exception", null, new string[] {
                        "Take.FromUser-ExceptionalCase"});
#line 254
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 255
 testRunner.When("We pass Null value as User identifier to api.Policy().Take().FromUser(null) metho" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 256
 testRunner.Then("api.Policy().Take().FromUser(null) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(Empty) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(Empty) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromRoleEmptyMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(Empty) method should throw exception", null, new string[] {
                        "Take.FromRole-ExceptionalCase"});
#line 259
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 260
 testRunner.When("We pass Empty value as Role identifier to api.Policy().Take().FromRole(Empty) met" +
                    "hod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
 testRunner.Then("api.Policy().Take().FromRole(Empty) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(null) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(null) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromRoleNullMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(null) method should throw exception", null, new string[] {
                        "Take.FromRole-ExceptionalCase"});
#line 264
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 265
 testRunner.When("We pass Null value as Role identifier to api.Policy().Take().FromRole(null) metho" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.Then("api.Policy().Take().FromRole(null) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FluentPolicyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FluentPolicyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

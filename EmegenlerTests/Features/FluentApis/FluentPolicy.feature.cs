// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.FluentApis
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FluentPolicyFeature : Xunit.IClassFixture<FluentPolicyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FluentPolicy.feature"
#line hidden
        
        public FluentPolicyFeature(FluentPolicyFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FluentPolicy", "\tThis class will do policy operation with fluent interface. Should create policy," +
                    " edit policy, delete policy and get policy and policies with using fluent interf" +
                    "ace\r\n\tAlso you can use Query interface", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_PagePageIdentifier_AccessGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 6
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.When("User(userIdentifier)->Page(pageIdentifier)->AccessGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Page(pageIdentifi" +
                    "er)->AccessGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessDenied" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessDenied" +
            "")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_PagePageIdentifier_AccessDenied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Page(pageIdentifier)->AccessDenied" +
                    "", null, new string[] {
                        "Query-NormalCase"});
#line 11
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 12
 testRunner.When("User(userIdentifier)->Page(pageIdentifier)->AccessDenied written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Page(pageIdentifi" +
                    "er)->AccessDenied query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Sh" +
            "ow")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Sh" +
            "ow")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_ComponentComponentIdentifier_Show()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Sh" +
                    "ow", null, new string[] {
                        "Query-NormalCase"});
#line 16
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
 testRunner.When("User(userIdentifier)->Component(componentIdentifier)->Show written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Component(compone" +
                    "ntIdentifier)->Show query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Hi" +
            "de")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Hi" +
            "de")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_ComponentComponentIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Component(componentIdentifier)->Hi" +
                    "de", null, new string[] {
                        "Query-NormalCase"});
#line 21
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 22
 testRunner.When("User(userIdentifier)->Component(componentIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Component(compone" +
                    "ntIdentifier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Form(formIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Form(formIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_FormFormIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Form(formIdentifier)->ActionGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 26
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
 testRunner.When("User(userIdentifier)->Form(formIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Form(formIdentifi" +
                    "er)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Form(formIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Form(formIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_FormFormIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Form(formIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 31
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.When("User(userIdentifier)->Form(formIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Form(formIdentifi" +
                    "er)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Form(formIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Form(formIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_FormFormIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Form(formIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 36
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 37
 testRunner.When("User(userIdentifier)->Form(formIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Form(formIdentifi" +
                    "er)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Editable")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Editable")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_InputİnputIdentifier_Editable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Editable", null, new string[] {
                        "Query-NormalCase"});
#line 41
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
 testRunner.When("User(userIdentifier)->Input(inputIdentifier)->Editable written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Input(inputIdenti" +
                    "fier)->Editable query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_InputİnputIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 46
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 47
 testRunner.When("User(userIdentifier)->Input(inputIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Input(inputIdenti" +
                    "fier)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_InputİnputIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Input(inputIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 51
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 52
 testRunner.When("User(userIdentifier)->Input(inputIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Input(inputIdenti" +
                    "fier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->ActionGr" +
            "anted")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->ActionGr" +
            "anted")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_ButtonButtonIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->ActionGr" +
                    "anted", null, new string[] {
                        "Query-NormalCase"});
#line 56
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 57
 testRunner.When("User(userIdentifier)->Button(buttonIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Button(buttonIden" +
                    "tifier)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Readonly" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Readonly" +
            "")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_ButtonButtonIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Readonly" +
                    "", null, new string[] {
                        "Query-NormalCase"});
#line 61
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 62
 testRunner.When("User(userIdentifier)->Button(buttonIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Button(buttonIden" +
                    "tifier)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_ButtonButtonIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Button(buttonIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 66
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.When("User(userIdentifier)->Button(buttonIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Button(buttonIden" +
                    "tifier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Link(linkIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Link(linkIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_LinkLinkIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Link(linkIdentifier)->ActionGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 71
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 72
 testRunner.When("User(userIdentifier)->Link(linkIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Link(linkIdentifi" +
                    "er)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_LinkLinkIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 76
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 77
 testRunner.When("User(userIdentifier)->Link(linkIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Link(linkIdentifi" +
                    "er)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryUserUserIdentifier_LinkLinkIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query User(userIdentifier)->Link(linkIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 81
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 82
 testRunner.When("User(userIdentifier)->Link(linkIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("Operation done without throw exception on User(userIdentifier)->Link(linkIdentifi" +
                    "er)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_PagePageIdentifier_AccessGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 86
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
 testRunner.When("Role(roleIdentifier)->Page(pageIdentifier)->AccessGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Page(pageIdentifi" +
                    "er)->AccessGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessDenied" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessDenied" +
            "")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_PagePageIdentifier_AccessDenied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Page(pageIdentifier)->AccessDenied" +
                    "", null, new string[] {
                        "Query-NormalCase"});
#line 91
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 92
 testRunner.When("Role(roleIdentifier)->Page(pageIdentifier)->AccessDenied written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Page(pageIdentifi" +
                    "er)->AccessDenied query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Sh" +
            "ow")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Sh" +
            "ow")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_ComponentComponentIdentifier_Show()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Sh" +
                    "ow", null, new string[] {
                        "Query-NormalCase"});
#line 96
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 97
 testRunner.When("Role(roleIdentifier)->Component(componentIdentifier)->Show written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Component(compone" +
                    "ntIdentifier)->Show query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Hi" +
            "de")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Hi" +
            "de")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_ComponentComponentIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Component(componentIdentifier)->Hi" +
                    "de", null, new string[] {
                        "Query-NormalCase"});
#line 101
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 102
 testRunner.When("Role(roleIdentifier)->Component(componentIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Component(compone" +
                    "ntIdentifier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_FormFormIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->ActionGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 106
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 107
 testRunner.When("Role(roleIdentifier)->Form(formIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Form(formIdentifi" +
                    "er)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_FormFormIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 111
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 112
 testRunner.When("Role(roleIdentifier)->Form(formIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Form(formIdentifi" +
                    "er)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_FormFormIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Form(formIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 116
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 117
 testRunner.When("Role(roleIdentifier)->Form(formIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 118
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Form(formIdentifi" +
                    "er)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Editable")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Editable")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_InputİnputIdentifier_Editable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Editable", null, new string[] {
                        "Query-NormalCase"});
#line 121
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 122
 testRunner.When("Role(roleIdentifier)->Input(inputIdentifier)->Editable written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 123
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Input(inputIdenti" +
                    "fier)->Editable query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_InputİnputIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 126
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 127
 testRunner.When("Role(roleIdentifier)->Input(inputIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 128
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Input(inputIdenti" +
                    "fier)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_InputİnputIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Input(inputIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 131
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 132
 testRunner.When("Role(roleIdentifier)->Input(inputIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 133
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Input(inputIdenti" +
                    "fier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->ActionGr" +
            "anted")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->ActionGr" +
            "anted")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_ButtonButtonIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->ActionGr" +
                    "anted", null, new string[] {
                        "Query-NormalCase"});
#line 136
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 137
 testRunner.When("Role(roleIdentifier)->Button(buttonIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 138
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Button(buttonIden" +
                    "tifier)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Readonly" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Readonly" +
            "")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_ButtonButtonIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Readonly" +
                    "", null, new string[] {
                        "Query-NormalCase"});
#line 141
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 142
 testRunner.When("Role(roleIdentifier)->Button(buttonIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Button(buttonIden" +
                    "tifier)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_ButtonButtonIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Button(buttonIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 146
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 147
 testRunner.When("Role(roleIdentifier)->Button(buttonIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 148
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Button(buttonIden" +
                    "tifier)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->ActionGrante" +
            "d")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_LinkLinkIdentifier_ActionGranted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->ActionGrante" +
                    "d", null, new string[] {
                        "Query-NormalCase"});
#line 151
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 152
 testRunner.When("Role(roleIdentifier)->Link(linkIdentifier)->ActionGranted written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 153
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Link(linkIdentifi" +
                    "er)->ActionGranted query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Readonly")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Readonly")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_LinkLinkIdentifier_Readonly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Readonly", null, new string[] {
                        "Query-NormalCase"});
#line 156
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 157
 testRunner.When("Role(roleIdentifier)->Link(linkIdentifier)->Readonly written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 158
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Link(linkIdentifi" +
                    "er)->Readonly query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Hide")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Hide")]
        [Xunit.TraitAttribute("Category", "Query-NormalCase")]
        public virtual void CreatePolicyWithQueryRoleRoleIdentifier_LinkLinkIdentifier_Hide()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with Query Role(roleIdentifier)->Link(linkIdentifier)->Hide", null, new string[] {
                        "Query-NormalCase"});
#line 161
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 162
 testRunner.When("Role(roleIdentifier)->Link(linkIdentifier)->Hide written in Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.Then("Operation done without throw exception on Role(roleIdentifier)->Link(linkIdentifi" +
                    "er)->Hide query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToPageWithAccessGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to page with access granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 166
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 167
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddPage(typeof(FakeClass)).AccessGra" +
                    "nted(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 168
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToPageWithAccessDeniedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to page with access denied prop" +
                    "erty", null, new string[] {
                        "Create-NormalCase"});
#line 171
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 172
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddPage(typeof(FakeClass)).AccessDen" +
                    "ied(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessDenied(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to page with access granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToPageWithAccessGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to page with access granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 176
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 177
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddPage(typeof(FakeClass)).AccessGra" +
                    "nted(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 178
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to page with access denied prop" +
            "erty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToPageWithAccessDeniedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to page with access denied prop" +
                    "erty", null, new string[] {
                        "Create-NormalCase"});
#line 181
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 182
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddPage(typeof(FakeClass)).AccessDen" +
                    "ied(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 183
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddPage(typeof(FakeClass)).AccessDenied(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToComponentWithShowProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to component with show property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 186
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 187
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddComponent(identifier).Show(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 188
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddComponent(identifier).Show(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToComponentWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to component with hide property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 190
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 191
 testRunner.When("api.Policy.Create().WithUser(userIdentifier).AddComponent(identifier).Hide(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(userIdenti" +
                    "fier).AddComponent(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to component with show property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToComponentWithShowProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to component with show property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 195
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 196
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddComponent(identifier).Show(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddComponent(identifier).Show(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to component with hide property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToComponentWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to component with hide property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 199
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 200
 testRunner.When("api.Policy.Create().WithRole(roleIdentifier).AddComponent(identifier).Hide(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(roleIdenti" +
                    "fier).AddComponent(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 204
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 205
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 206
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 208
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 209
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToFormWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to form with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 212
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 213
 testRunner.When("api.Policy.Create().WithUser(identifier).AddForm(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddForm(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 217
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 218
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 221
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 222
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 223
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to form with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToFormWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to form with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 225
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 226
 testRunner.When("api.Policy.Create().WithRole(identifier).AddForm(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 227
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddForm(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with editable property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with editable property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithEditableProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with editable property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 230
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 231
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Editable(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 232
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Editable(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with readonly property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 234
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 235
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 236
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToİnputWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to input with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 238
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 239
 testRunner.When("api.Policy.Create().WithUser(identifier).AddInput(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 240
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddInput(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to to input with editable prope" +
            "rty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to to input with editable prope" +
            "rty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToToİnputWithEditableProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to to input with editable prope" +
                    "rty", null, new string[] {
                        "Create-NormalCase"});
#line 243
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 244
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Editable(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 245
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Editable(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to input with readonly property" +
            "")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToİnputWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to input with readonly property" +
                    "", null, new string[] {
                        "Create-NormalCase"});
#line 247
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 248
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 249
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to input with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToİnputWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to input with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 251
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 252
 testRunner.When("api.Policy.Create().WithRole(identifier).AddInput(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddInput(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with action granted p" +
                    "roperty", null, new string[] {
                        "Create-NormalCase"});
#line 256
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 257
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).ActionGranted(); c" +
                    "alled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 258
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with readonly propert" +
                    "y", null, new string[] {
                        "Create-NormalCase"});
#line 260
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 261
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).Readonly(); called" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToButtonWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to button with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 264
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 265
 testRunner.When("api.Policy.Create().WithUser(identifier).AddButton(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 266
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddButton(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with action granted p" +
            "roperty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with action granted p" +
                    "roperty", null, new string[] {
                        "Create-NormalCase"});
#line 269
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 270
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).ActionGranted(); c" +
                    "alled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with readonly propert" +
            "y")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with readonly propert" +
                    "y", null, new string[] {
                        "Create-NormalCase"});
#line 273
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 274
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).Readonly(); called" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to button with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToButtonWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to button with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 277
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 278
 testRunner.When("api.Policy.Create().WithRole(identifier).AddButton(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 279
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddButton(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 282
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 283
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 284
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 286
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 287
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 288
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with user identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with user identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithUserİdentifierAndAddPolicyToLinkWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with user identifier and add policy to link with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 290
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 291
 testRunner.When("api.Policy.Create().WithUser(identifier).AddLink(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 292
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithUser(identifier" +
                    ").AddLink(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with action granted pro" +
            "perty")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithActionGrantedProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with action granted pro" +
                    "perty", null, new string[] {
                        "Create-NormalCase"});
#line 295
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 296
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).ActionGranted(); cal" +
                    "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 297
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).ActionGranted(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with readonly property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithReadonlyProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with readonly property", null, new string[] {
                        "Create-NormalCase"});
#line 299
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 300
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).Readonly(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 301
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).Readonly(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Create policy with role identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Create policy with role identifier and add policy to link with hide property")]
        [Xunit.TraitAttribute("Category", "Create-NormalCase")]
        public virtual void CreatePolicyWithRoleİdentifierAndAddPolicyToLinkWithHideProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create policy with role identifier and add policy to link with hide property", null, new string[] {
                        "Create-NormalCase"});
#line 303
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 304
 testRunner.When("api.Policy.Create().WithRole(identifier).AddLink(identifier).Hide(); called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 305
 testRunner.Then("Operation done without throw exception on api.Policy.Create().WithRole(identifier" +
                    ").AddLink(identifier).Hide(); call", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty UserIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty UserIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyUserIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty UserIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 308
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 309
  testRunner.When("api.Policy.Create().WithUser().AddPage(typeof(FakeClass)).AccessGranted(); called" +
                    " on WithUser method with empty UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 310
  testRunner.Then("NullReferanceException throws by WithUser method with empty UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null UserIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null UserIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullUserIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null UserIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 312
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 313
  testRunner.When("api.Policy.Create().WithUser(null).AddPage(typeof(FakeClass)).AccessGranted(); ca" +
                    "lled on WithUser method with null UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 314
  testRunner.Then("NullReferanceException throws by WithUser method with null UserIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty RoleIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty RoleIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyRoleIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty RoleIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 316
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 317
  testRunner.When("api.Policy.Create().WithRole().AddPage(typeof(FakeClass)).AccessGranted(); called" +
                    " on WithRole method with empty RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 318
  testRunner.Then("NullReferanceException throws by WithRole method with empty RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null RoleIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null RoleIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullRoleIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null RoleIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 320
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 321
  testRunner.When("api.Policy.Create().WithRole(null).AddPage(typeof(FakeClass)).AccessGranted(); ca" +
                    "lled on WithRole method with null RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 322
  testRunner.Then("NullReferanceException throws by WithRole method with null RoleIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null PageType")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null PageType")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullPageType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null PageType", null, new string[] {
                        "Create-ExceptionalCase"});
#line 325
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 326
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddPage(null).AccessGranted(); calle" +
                    "d on AddPage method with null PageType prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 327
  testRunner.Then("NullReferanceException throws by AddPage method with null PageType prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty ComponentIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty ComponentIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyComponentIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty ComponentIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 330
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 331
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddComponent().Show(); called on Add" +
                    "Component method with empty ComponentIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 332
  testRunner.Then("NullReferanceException throws by AddComponent method with empty ComponentIdentifi" +
                    "er prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null ComponentIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null ComponentIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullComponentIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null ComponentIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 334
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 335
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddComponent(null).Show(); called on" +
                    " AddComponent method with null ComponentIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 336
  testRunner.Then("NullReferanceException throws by AddComponent method with null ComponentIdentifie" +
                    "r prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty FormIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty FormIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyFormIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty FormIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 339
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 340
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddForm().ActionGranted(); called on" +
                    " AddForm method with empty FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 341
  testRunner.Then("NullReferanceException throws by AddForm method with empty FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null FormIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null FormIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullFormIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null FormIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 343
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 344
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddForm(null).ActionGranted(); calle" +
                    "d on AddForm method with null FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 345
  testRunner.Then("NullReferanceException throws by AddForm method with null FormIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty InputIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty InputIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyInputIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty InputIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 348
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 349
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddInput().Readonly(); called on Add" +
                    "Input method with empty InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 350
  testRunner.Then("NullReferanceException throws by AddInput method with empty InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null InputIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null InputIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullInputIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null InputIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 352
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 353
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddInput(null).Readonly(); called on" +
                    " AddForm method with null InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 354
  testRunner.Then("NullReferanceException throws by AddInput method with null InputIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty ButtonIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty ButtonIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyButtonIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty ButtonIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 357
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 358
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddButton().Readonly(); called on Ad" +
                    "dButton method with empty ButtonIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 359
  testRunner.Then("NullReferanceException throws by AddButton method with empty ButtonIdentifier pro" +
                    "p", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null ButtonIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null ButtonIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullButtonIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null ButtonIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 361
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 362
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddButton(null).Readonly(); called o" +
                    "n AddButton method with null ButtonIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
  testRunner.Then("NullReferanceException throws by AddButton method with null ButtonIdentifier prop" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with empty LinkIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with empty LinkIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithEmptyLinkIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with empty LinkIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 366
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 367
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddLink().Readonly(); called on AddL" +
                    "ink method with empty LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 368
  testRunner.Then("NullReferanceException throws by AddLink method with empty LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Try to create policy with null LinkIdentifier")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Try to create policy with null LinkIdentifier")]
        [Xunit.TraitAttribute("Category", "Create-ExceptionalCase")]
        public virtual void TryToCreatePolicyWithNullLinkIdentifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to create policy with null LinkIdentifier", null, new string[] {
                        "Create-ExceptionalCase"});
#line 370
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 371
  testRunner.When("api.Policy.Create().WithUser(UserIdentifier).AddLink(null).Readonly(); called on " +
                    "AddLink method with null LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 372
  testRunner.Then("NullReferanceException throws by AddLink method with null LinkIdentifier prop", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
            "ty")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
            "ty")]
        [Xunit.TraitAttribute("Category", "Get-NormalCase")]
        public virtual void GetMethodTakeValidPolicyIdAndMethodShouldReturnValidEmegelerPolicyEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take valid PolicyId and method should return valid EmegelerPolicy enti" +
                    "ty", null, new string[] {
                        "Get-NormalCase"});
#line 374
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 375
 testRunner.When("We pass valid PolicyId to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 376
 testRunner.Then("Get method should return valid EmegelerPolicy entity from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take PolicyId with zero value and method throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take PolicyId with zero value and method throw exception")]
        [Xunit.TraitAttribute("Category", "Get-ExceptionalCase")]
        public virtual void GetMethodTakePolicyIdWithZeroValueAndMethodThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take PolicyId with zero value and method throw exception", null, new string[] {
                        "Get-ExceptionalCase"});
#line 378
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 379
 testRunner.When("We pass PolicyId with zero value to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 380
 testRunner.Then("Get method should throw exception on PolicyId with zero value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take PolicyId with negative value and method throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Get method take PolicyId with negative value and method throw exception")]
        [Xunit.TraitAttribute("Category", "Get-ExceptionalCase")]
        public virtual void GetMethodTakePolicyIdWithNegativeValueAndMethodThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take PolicyId with negative value and method throw exception", null, new string[] {
                        "Get-ExceptionalCase"});
#line 382
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 383
 testRunner.When("We pass PolicyId with negative value to Get method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 384
 testRunner.Then("Get method should throw exception on PolicyId with negative value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid Page and PageSize prop and method should return List of Po" +
            "licies")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid Page and PageSize prop and method should return List of Po" +
            "licies")]
        [Xunit.TraitAttribute("Category", "Take-NormalCase")]
        public virtual void TakeMethodTakeValidPageAndPageSizePropAndMethodShouldReturnListOfPolicies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid Page and PageSize prop and method should return List of Po" +
                    "licies", null, new string[] {
                        "Take-NormalCase"});
#line 387
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 388
 testRunner.When("We pass valid Page and PageSize prop on Take method from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 389
 testRunner.Then("Take method should return List of EmegelerPolicy entites from FluentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid Page but PageSize is less than one")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid Page but PageSize is less than one")]
        [Xunit.TraitAttribute("Category", "Take-ExceptionalCase")]
        public virtual void TakeMethodTakeValidPageButPageSizeİsLessThanOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid Page but PageSize is less than one", null, new string[] {
                        "Take-ExceptionalCase"});
#line 391
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 392
 testRunner.When("We pass valid Page prop but PageSize value is less than one to Take method from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 393
 testRunner.Then("Take method should throw exception on when PageSize value is less than one from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method take valid PageSize but Page is less than one")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Take method take valid PageSize but Page is less than one")]
        [Xunit.TraitAttribute("Category", "Take-ExceptionalCase")]
        public virtual void TakeMethodTakeValidPageSizeButPageİsLessThanOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method take valid PageSize but Page is less than one", null, new string[] {
                        "Take-ExceptionalCase"});
#line 395
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 396
 testRunner.When("We pass valid PageSize prop but Page value is less than one to Take method from F" +
                    "luentPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 397
 testRunner.Then("Take method should throw exception on when Page value is less than one from Fluen" +
                    "tPolicy class", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Count method when called return Count of Policies in EmegenlerTables from PolicyI" +
            "nterface")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "Count method when called return Count of Policies in EmegenlerTables from PolicyI" +
            "nterface")]
        [Xunit.TraitAttribute("Category", "Count-NormalCase")]
        public virtual void CountMethodWhenCalledReturnCountOfPoliciesİnEmegenlerTablesFromPolicyInterface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count method when called return Count of Policies in EmegenlerTables from PolicyI" +
                    "nterface", null, new string[] {
                        "Count-NormalCase"});
#line 400
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 401
 testRunner.When("Count method called from Pplicy interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
 testRunner.Then("Count method should return Count of Policies in EmegenlerTables from PolicyInterf" +
                    "ace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
            "g to User")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
            "g to User")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-NormalCase")]
        public virtual void Api_Policy_Take_FromUserİdentifierMethodShouldGetListOfPoliciesBelongToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(identifier) method should get List of Policies belon" +
                    "g to User", null, new string[] {
                        "Take.FromUser-NormalCase"});
#line 405
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 406
 testRunner.When("We pass valid identifier api.Policy().Take().FromUser(identifier) method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 407
 testRunner.Then("api.Policy().Take().FromUser(identifier) should return List of Policies belong to" +
                    " User", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
            "g to Role")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
            "g to Role")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-NormalCase")]
        public virtual void Api_Policy_Take_FromRoleİdentifierMethodShouldGetListOfPoliciesBelongToRole()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(identifier) method should get List of Policies belon" +
                    "g to Role", null, new string[] {
                        "Take.FromRole-NormalCase"});
#line 410
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 411
 testRunner.When("We pass valid identifier api.Policy().Take().FromRole(identifier) method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 412
 testRunner.Then("api.Policy().Take().FromRole(identifier) should return List of Policies belong to" +
                    " Role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(Empty) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(Empty) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromUserEmptyMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(Empty) method should throw exception", null, new string[] {
                        "Take.FromUser-ExceptionalCase"});
#line 415
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 416
 testRunner.When("We pass Empty value as User identifier to api.Policy().Take().FromUser(Empty) met" +
                    "hod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 417
 testRunner.Then("api.Policy().Take().FromUser(Empty) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromUser(null) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromUser(null) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromUser-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromUserNullMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromUser(null) method should throw exception", null, new string[] {
                        "Take.FromUser-ExceptionalCase"});
#line 420
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 421
 testRunner.When("We pass Null value as User identifier to api.Policy().Take().FromUser(null) metho" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 422
 testRunner.Then("api.Policy().Take().FromUser(null) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(Empty) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(Empty) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromRoleEmptyMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(Empty) method should throw exception", null, new string[] {
                        "Take.FromRole-ExceptionalCase"});
#line 425
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 426
 testRunner.When("We pass Empty value as Role identifier to api.Policy().Take().FromRole(Empty) met" +
                    "hod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 427
 testRunner.Then("api.Policy().Take().FromRole(Empty) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="api.Policy().Take().FromRole(null) method should throw exception")]
        [Xunit.TraitAttribute("FeatureTitle", "FluentPolicy")]
        [Xunit.TraitAttribute("Description", "api.Policy().Take().FromRole(null) method should throw exception")]
        [Xunit.TraitAttribute("Category", "Take.FromRole-ExceptionalCase")]
        public virtual void Api_Policy_Take_FromRoleNullMethodShouldThrowException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("api.Policy().Take().FromRole(null) method should throw exception", null, new string[] {
                        "Take.FromRole-ExceptionalCase"});
#line 430
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 431
 testRunner.When("We pass Null value as Role identifier to api.Policy().Take().FromRole(null) metho" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 432
 testRunner.Then("api.Policy().Take().FromRole(null) method should throw exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FluentPolicyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FluentPolicyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

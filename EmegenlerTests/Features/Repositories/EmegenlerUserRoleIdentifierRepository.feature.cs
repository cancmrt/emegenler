// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.Repositories
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EmegenlerUserRoleIdentifierRepositoryFeature : object, Xunit.IClassFixture<EmegenlerUserRoleIdentifierRepositoryFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EmegenlerUserRoleIdentifierRepository.feature"
#line hidden
        
        public EmegenlerUserRoleIdentifierRepositoryFeature(EmegenlerUserRoleIdentifierRepositoryFeature.FixtureData fixtureData, EmegenlerTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmegenlerUserRoleIdentifierRepository", @"	This repo should do listed operations
	Insert(Add,Edit) This will be the same method. If we send entity with id method update entity, if we send without id method should add entity to db
	Get We have to get spesific EmegenlerUserRoleIdentifier entity from db
	Take We should get list of EmegenlerUserRoleIdentifier entities from db
	Delete We should remove entity with spesific id", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With using Insert method we can be add new EmegenlerUserRoleIdentifier to db")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can be add new EmegenlerUserRoleIdentifier to db")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanBeAddNewEmegenlerUserRoleIdentifierToDb()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Insert"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can be add new EmegenlerUserRoleIdentifier to db", null, new string[] {
                        "NormalCase-Insert"});
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
testRunner.When("We pass new EmegenlerUserRoleIdentifier entity to our Insert method with zero id " +
                        "on entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
testRunner.Then("Insert method should add new EmegenlerUserRoleIdentifier entity to db return with" +
                        " success and new EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="With using Insert method we can update our exist EmegenlerUserRoleIdentifier enti" +
            "ty")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can update our exist EmegenlerUserRoleIdentifier enti" +
            "ty")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanUpdateOurExistEmegenlerUserRoleIdentifierEntity()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Insert"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can update our exist EmegenlerUserRoleIdentifier enti" +
                    "ty", null, new string[] {
                        "NormalCase-Insert"});
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
testRunner.When("We pass EmegenlerUserRoleIdentifier entity with non zero id to our Insert method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
testRunner.Then("Insert method should edit EmegenlerUserRoleIdentifier and save to db after that s" +
                        "hould return success with updated EmegenlerUserRoleIdentifier entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Insert")]
        public virtual void IfWePassNullValueToOurInsertMethodMethodShouldThrowNullReferenceException()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Insert"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If we pass null value to our Insert method, method should throw NullReferenceExce" +
                    "ption", null, new string[] {
                        "ExceptionalCase-Insert"});
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
testRunner.When("We pass null value to Insert method without EmegenlerUserRoleIdentifier entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
testRunner.Then("Insert method should throw NullReferenceException without EmegenlerUserRoleIdenti" +
                        "fier on Returner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Method take EmegenlerUserRoleIdentifierId to get EmegenlerUserRoleIdentifier " +
            "entity.")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Get Method take EmegenlerUserRoleIdentifierId to get EmegenlerUserRoleIdentifier " +
            "entity.")]
        [Xunit.TraitAttribute("Category", "NormalCase-Get")]
        public virtual void GetMethodTakeEmegenlerUserRoleIdentifierIdToGetEmegenlerUserRoleIdentifierEntity_()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Get"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Method take EmegenlerUserRoleIdentifierId to get EmegenlerUserRoleIdentifier " +
                    "entity.", null, new string[] {
                        "NormalCase-Get"});
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
testRunner.When("We pass valid EmegenlerUserRoleIdentifierId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
testRunner.Then("Get method should return valid EmegenlerUserRoleIdentifier entity with result suc" +
                        "cess on valid EmegenlerUserRoleIdentifierId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get method take zero as EmegenlerUserRoleIdentifierId")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Get method take zero as EmegenlerUserRoleIdentifierId")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeZeroAsEmegenlerUserRoleIdentifierId()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Get"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take zero as EmegenlerUserRoleIdentifierId", null, new string[] {
                        "ExceptionalCase-Get"});
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
testRunner.When("We pass zero value as EmegenlerUserRoleIdentifierId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
testRunner.Then("Get method should return state is fail and return Exception on EmegenlerUserRoleI" +
                        "dentifierId is zero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get method take negative as EmegenlerUserRoleIdentifierId")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Get method take negative as EmegenlerUserRoleIdentifierId")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeNegativeAsEmegenlerUserRoleIdentifierId()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Get"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take negative as EmegenlerUserRoleIdentifierId", null, new string[] {
                        "ExceptionalCase-Get"});
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
testRunner.When("We pass negative value as EmegenlerUserRoleIdentifierId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
testRunner.Then("Get method should return state is fail and return Exception on EmegenlerUserRoleI" +
                        "dentifierId is negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get method take valid EmegenlerUserRoleIdentifierId but id record not found in ou" +
            "r database")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Get method take valid EmegenlerUserRoleIdentifierId but id record not found in ou" +
            "r database")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeValidEmegenlerUserRoleIdentifierIdButİdRecordNotFoundİnOurDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Get"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take valid EmegenlerUserRoleIdentifierId but id record not found in ou" +
                    "r database", null, new string[] {
                        "ExceptionalCase-Get"});
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
testRunner.When("We pass valid id value on EmegenlerUserRoleIdentifier entity to get with valid Em" +
                        "egenlerUserRoleIdentifierId from Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
testRunner.Then("Get method should return state is fail and return KeyNotFoundException on Emegenl" +
                        "erUserRoleIdentifierId is valid but record not found in our database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take method getting page and pageSize attiribute if method take valid page and pa" +
            "geSize attirubute, method should return List of EmegenlerUserRoleIdentifier enti" +
            "ties")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting page and pageSize attiribute if method take valid page and pa" +
            "geSize attirubute, method should return List of EmegenlerUserRoleIdentifier enti" +
            "ties")]
        [Xunit.TraitAttribute("Category", "NormalCase-Take")]
        public virtual void TakeMethodGettingPageAndPageSizeAttiributeİfMethodTakeValidPageAndPageSizeAttirubuteMethodShouldReturnListOfEmegenlerUserRoleIdentifierEntities()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Take"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting page and pageSize attiribute if method take valid page and pa" +
                    "geSize attirubute, method should return List of EmegenlerUserRoleIdentifier enti" +
                    "ties", null, new string[] {
                        "NormalCase-Take"});
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
testRunner.When("We pass valid page and pageSize take method on EmegenlerUserRoleIdentifierReposit" +
                        "ory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
testRunner.Then("Take method should return List of EmegenlerUserRoleIdentifier entites from Emegen" +
                        "lerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take method getting valid page but pageSize value is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting valid page but pageSize value is zero")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettingValidPageButPageSizeValueİsZero()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Take"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting valid page but pageSize value is zero", null, new string[] {
                        "ExceptionalCase-Take"});
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
testRunner.When("We pass valid page attirubute but pageSize attirubute value is zero on EmegenlerU" +
                        "serRoleIdentifierRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
testRunner.Then("Take method should return fail status and should return Exception on zero value w" +
                        "ith pageSize attiribute from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take method gettig valid page attiribute but pageSize attirubute is negative")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Take method gettig valid page attiribute but pageSize attirubute is negative")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettigValidPageAttiributeButPageSizeAttirubuteİsNegative()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Take"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method gettig valid page attiribute but pageSize attirubute is negative", null, new string[] {
                        "ExceptionalCase-Take"});
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
testRunner.When("We pass valid page attiribute but pageSize attirubute value is negative on Emegen" +
                        "lerUserRoleIdentifierRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
testRunner.Then("Take method should return fail status and should return Exception on negative val" +
                        "ue with pageSize attirubute from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take method getting valid pageSize but page value is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting valid pageSize but page value is zero")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettingValidPageSizeButPageValueİsZero()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Take"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting valid pageSize but page value is zero", null, new string[] {
                        "ExceptionalCase-Take"});
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
testRunner.When("We pass valid pageSize attirubute but page attirubute value is zero on EmegenlerU" +
                        "serRoleIdentifierRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
testRunner.Then("Take method should return fail status and should return Exception on zero value w" +
                        "ith page attiribute from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take method gettig valid pageSize attiribute but page attirubute is negative")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Take method gettig valid pageSize attiribute but page attirubute is negative")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettigValidPageSizeAttiributeButPageAttirubuteİsNegative()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Take"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method gettig valid pageSize attiribute but page attirubute is negative", null, new string[] {
                        "ExceptionalCase-Take"});
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
testRunner.When("We pass valid pageSize attiribute but page attirubute value is negative on Emegen" +
                        "lerUserRoleIdentifierRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
testRunner.Then("Take method should return fail status and should return Exception on negative val" +
                        "ue with page attirubute from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete method take valid EmegenlerUserRoleIdentifier entity with Id and method sh" +
            "ould return Deleted EmegenlerUserRoleIdentifier entity")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerUserRoleIdentifier entity with Id and method sh" +
            "ould return Deleted EmegenlerUserRoleIdentifier entity")]
        [Xunit.TraitAttribute("Category", "NormalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerUserRoleIdentifierEntityWithIdAndMethodShouldReturnDeletedEmegenlerUserRoleIdentifierEntity()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Delete"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerUserRoleIdentifier entity with Id and method sh" +
                    "ould return Deleted EmegenlerUserRoleIdentifier entity", null, new string[] {
                        "NormalCase-Delete"});
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
testRunner.When("We pass valid EmegenlerUserRoleIdentifier entity with Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
testRunner.Then("Delete method should return succuess status and should return deleted EmegenlerUs" +
                        "erRoleIdentifier entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete method take valid EmegenlerUserRoleIdentifier without Id")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerUserRoleIdentifier without Id")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerUserRoleIdentifierWithoutId()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Delete"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerUserRoleIdentifier without Id", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
testRunner.When("We pass valid EmegenlerUserRoleIdentifier entity without Id to Delete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
testRunner.Then("Delete method should return fail status and should return Exception on EmegenlerU" +
                        "serRoleIdentifier entity without Id from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete method take valid EmegenlerUserRoleIdentifier with Id value which is less " +
            "than one")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerUserRoleIdentifier with Id value which is less " +
            "than one")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerUserRoleIdentifierWithIdValueWhichİsLessThanOne()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Delete"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerUserRoleIdentifier with Id value which is less " +
                    "than one", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
testRunner.When("We pass valid EmegenlerUserRoleIdentifier entity with Id value is equal to less t" +
                        "han one on Delete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
testRunner.Then("Delete method should return fail status and should return Exception on EmegenlerU" +
                        "serRoleIdentifier entity with Id value is equal to less than one from EmegenlerU" +
                        "serRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete method take null as a parameter on Delete method")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take null as a parameter on Delete method")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeNullAsAParameterOnDeleteMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "ExceptionalCase-Delete"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take null as a parameter on Delete method", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
testRunner.When("We pass null EmegenlerUserRoleIdentifier entity to Delete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
testRunner.Then("Delete method should return fail status and should return Exception on null Emege" +
                        "nlerUserRoleIdentifier entity from EmegenlerUserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Count method should return Count of UserRoleIdentifiers in EmegenlerTables")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerUserRoleIdentifierRepository")]
        [Xunit.TraitAttribute("Description", "Count method should return Count of UserRoleIdentifiers in EmegenlerTables")]
        [Xunit.TraitAttribute("Category", "NormalCase-Count")]
        public virtual void CountMethodShouldReturnCountOfUserRoleIdentifiersİnEmegenlerTables()
        {
            string[] tagsOfScenario = new string[] {
                    "NormalCase-Count"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count method should return Count of UserRoleIdentifiers in EmegenlerTables", null, new string[] {
                        "NormalCase-Count"});
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 85
testRunner.When("We call Count method in UserRoleIdentifierRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
testRunner.Then("Count method should return Count of UserRolesIdentifiers in EmegenlerTables", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EmegenlerUserRoleIdentifierRepositoryFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EmegenlerUserRoleIdentifierRepositoryFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

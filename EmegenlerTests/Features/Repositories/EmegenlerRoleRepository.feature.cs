// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.Repositories
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EmegenlerRoleRepositoryFeature : Xunit.IClassFixture<EmegenlerRoleRepositoryFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EmegenlerRoleRepository.feature"
#line hidden
        
        public EmegenlerRoleRepositoryFeature(EmegenlerRoleRepositoryFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmegenlerRoleRepository", @"	This repo should do listed operations
	Insert(Add,Edit) This will be the same method. If we send entity with id method update entity, if we send without id method should add entity to db
	Get We have to get spesific EmegenlerRole entity from db
	Take We should get list of EmegenlerRole entities from db
	Delete We should remove entity with spesific id", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="With using Insert method we can be add new EmegenlerRole to db")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can be add new EmegenlerRole to db")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanBeAddNewEmegenlerRoleToDb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can be add new EmegenlerRole to db", null, new string[] {
                        "NormalCase-Insert"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
testRunner.When("We pass new EmegenlerRole entity to our Insert method with zero id on entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then("Insert method should add new EmegenlerRole entity to db return with success and n" +
                    "ew EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="With using Insert method we can update our exist EmegenlerRole entity")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can update our exist EmegenlerRole entity")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanUpdateOurExistEmegenlerRoleEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can update our exist EmegenlerRole entity", null, new string[] {
                        "NormalCase-Insert"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
testRunner.When("We pass EmegenlerRole entity with non zero id to our Insert method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("Insert method should edit EmegenlerRole and save to db after that should return s" +
                    "uccess with updated EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Insert")]
        public virtual void IfWePassNullValueToOurInsertMethodMethodShouldThrowNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If we pass null value to our Insert method, method should throw NullReferenceExce" +
                    "ption", null, new string[] {
                        "ExceptionalCase-Insert"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
testRunner.When("We pass null value to Insert method without EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
testRunner.Then("Insert method should throw NullReferenceException without EmegenlerRole on Return" +
                    "er", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get Method take EmegenlerRoleId to get EmegenlerRole entity.")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Get Method take EmegenlerRoleId to get EmegenlerRole entity.")]
        [Xunit.TraitAttribute("Category", "NormalCase-Get")]
        public virtual void GetMethodTakeEmegenlerRoleIdToGetEmegenlerRoleEntity_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Method take EmegenlerRoleId to get EmegenlerRole entity.", null, new string[] {
                        "NormalCase-Get"});
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 24
testRunner.When("We pass valid EmegenlerRoleId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
testRunner.Then("Get method should return valid EmegenlerRole entity with result success on valid " +
                    "EmegenlerRoleId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take zero as EmegenlerRoleId")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Get method take zero as EmegenlerRoleId")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeZeroAsEmegenlerRoleId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take zero as EmegenlerRoleId", null, new string[] {
                        "ExceptionalCase-Get"});
#line 28
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 29
testRunner.When("We pass zero value as EmegenlerRoleId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
testRunner.Then("Get method should return state is fail and return Exception on EmegenlerRoleId is" +
                    " zero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take negative as EmegenlerRoleId")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Get method take negative as EmegenlerRoleId")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeNegativeAsEmegenlerRoleId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take negative as EmegenlerRoleId", null, new string[] {
                        "ExceptionalCase-Get"});
#line 33
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 34
testRunner.When("We pass negative value as EmegenlerRoleId to Get method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
testRunner.Then("Get method should return state is fail and return Exception on EmegenlerRoleId is" +
                    " negative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get method take valid EmegenlerRoleId but id record not found in our databaser")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Get method take valid EmegenlerRoleId but id record not found in our databaser")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Get")]
        public virtual void GetMethodTakeValidEmegenlerRoleIdButİdRecordNotFoundİnOurDatabaser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get method take valid EmegenlerRoleId but id record not found in our databaser", null, new string[] {
                        "ExceptionalCase-Get"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 39
testRunner.When("We pass valid id value as EmegenlerRoleId to Get valid EmegenlerRoleId from Get m" +
                    "ethod", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
testRunner.Then("Get method should return state is fail and return KeyNotFoundException on Emegenl" +
                    "erRoleId is valid but record not found in our database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method getting page and pageSize attiribute if method take valid page and pa" +
            "geSize attirubute, method should return List of EmegenlerRole entities")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting page and pageSize attiribute if method take valid page and pa" +
            "geSize attirubute, method should return List of EmegenlerRole entities")]
        [Xunit.TraitAttribute("Category", "NormalCase-Take")]
        public virtual void TakeMethodGettingPageAndPageSizeAttiributeİfMethodTakeValidPageAndPageSizeAttirubuteMethodShouldReturnListOfEmegenlerRoleEntities()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting page and pageSize attiribute if method take valid page and pa" +
                    "geSize attirubute, method should return List of EmegenlerRole entities", null, new string[] {
                        "NormalCase-Take"});
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
testRunner.When("We pass valid page and pageSize take method on EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
testRunner.Then("Take method should return List of EmegenlerRole entites from EmegenlerRoleReposit" +
                    "ory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method getting valid page but pageSize value is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting valid page but pageSize value is zero")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettingValidPageButPageSizeValueİsZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting valid page but pageSize value is zero", null, new string[] {
                        "ExceptionalCase-Take"});
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 49
testRunner.When("We pass valid page attirubute but pageSize attirubute value is zero on EmegenlerR" +
                    "oleRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
testRunner.Then("Take method should return fail status and should return Exception on zero value w" +
                    "ith pageSize attiribute from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method gettig valid page attiribute but pageSize attirubute is negative")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Take method gettig valid page attiribute but pageSize attirubute is negative")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettigValidPageAttiributeButPageSizeAttirubuteİsNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method gettig valid page attiribute but pageSize attirubute is negative", null, new string[] {
                        "ExceptionalCase-Take"});
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 53
testRunner.When("We pass valid page attiribute but pageSize attirubute value is negative on Emegen" +
                    "lerRoleRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
testRunner.Then("Take method should return fail status and should return Exception on negative val" +
                    "ue with pageSize attirubute from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method getting valid pageSize but page value is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Take method getting valid pageSize but page value is zero")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettingValidPageSizeButPageValueİsZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method getting valid pageSize but page value is zero", null, new string[] {
                        "ExceptionalCase-Take"});
#line 57
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 58
testRunner.When("We pass valid pageSize attirubute but page attirubute value is zero on EmegenlerR" +
                    "oleRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
testRunner.Then("Take method should return fail status and should return Exception on zero value w" +
                    "ith page attiribute from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Take method gettig valid pageSize attiribute but page attirubute is negative")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Take method gettig valid pageSize attiribute but page attirubute is negative")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Take")]
        public virtual void TakeMethodGettigValidPageSizeAttiributeButPageAttirubuteİsNegative()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take method gettig valid pageSize attiribute but page attirubute is negative", null, new string[] {
                        "ExceptionalCase-Take"});
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 62
testRunner.When("We pass valid pageSize attiribute but page attirubute value is negative on Emegen" +
                    "lerRoleRepository\'s Take method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
testRunner.Then("Take method should return fail status and should return Exception on negative val" +
                    "ue with page attirubute from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete method take valid EmegenlerRole entity with Id and method should return De" +
            "leted EmegenlerRole entity")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerRole entity with Id and method should return De" +
            "leted EmegenlerRole entity")]
        [Xunit.TraitAttribute("Category", "NormalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerRoleEntityWithIdAndMethodShouldReturnDeletedEmegenlerRoleEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerRole entity with Id and method should return De" +
                    "leted EmegenlerRole entity", null, new string[] {
                        "NormalCase-Delete"});
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
testRunner.When("We pass valid EmegenlerRole entity with Id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
testRunner.Then("Delete method should return succuess status and should return deleted EmegenlerRo" +
                    "le entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete method take valid EmegenlerPolicy without Id")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerPolicy without Id")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerPolicyWithoutId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerPolicy without Id", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 71
testRunner.When("We pass valid EmegenlerRole entity without Id to Delete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
testRunner.Then("Delete method should return fail status and should return Exception on EmegenlerR" +
                    "ole entity without Id from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete method take valid EmegenlerRole with Id value which is less than one")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take valid EmegenlerRole with Id value which is less than one")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeValidEmegenlerRoleWithIdValueWhichİsLessThanOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take valid EmegenlerRole with Id value which is less than one", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 74
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 75
testRunner.When("We pass valid EmegenlerRole entity with Id value is equal to less than one on Del" +
                    "ete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
testRunner.Then("Delete method should return fail status and should return Exception on EmegenlerR" +
                    "ole entity with Id value is equal to less than one from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete method take null as a parameter on Delete method")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Delete method take null as a parameter on Delete method")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Delete")]
        public virtual void DeleteMethodTakeNullAsAParameterOnDeleteMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete method take null as a parameter on Delete method", null, new string[] {
                        "ExceptionalCase-Delete"});
#line 78
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 79
testRunner.When("We pass null EmegenlerRole entity to Delete method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
testRunner.Then("Delete method should return fail status and should return Exception on null Emege" +
                    "nlerRole entity from EmegenlerRoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Count method should return Count of Roles in EmegenlerTables")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "Count method should return Count of Roles in EmegenlerTables")]
        [Xunit.TraitAttribute("Category", "NormalCase-Count")]
        public virtual void CountMethodShouldReturnCountOfRolesİnEmegenlerTables()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Count method should return Count of Roles in EmegenlerTables", null, new string[] {
                        "NormalCase-Count"});
#line 83
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 84
testRunner.When("We call Count method in RoleRepository", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
testRunner.Then("Count method should return Count of Roles in EmegenlerTables", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EmegenlerRoleRepositoryFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EmegenlerRoleRepositoryFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

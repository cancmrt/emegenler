// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EmegenlerTests.Features.Repositories
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EmegenlerRoleRepositoryFeature : Xunit.IClassFixture<EmegenlerRoleRepositoryFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EmegenlerRoleRepository.feature"
#line hidden
        
        public EmegenlerRoleRepositoryFeature(EmegenlerRoleRepositoryFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EmegenlerRoleRepository", @"	This repo should do listed operations
	Insert(Add,Edit) This will be the same method. If we send entity with id method update entity, if we send without id method should add entity to db
	Get We have to get spesific EmegenlerRole entity from db
	Take We should get list of EmegenlerRole entities from db
	Delete We should remove entity with spesific id", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="With using Insert method we can be add new EmegenlerRole to db")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can be add new EmegenlerRole to db")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanBeAddNewEmegenlerRoleToDb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can be add new EmegenlerRole to db", null, new string[] {
                        "NormalCase-Insert"});
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
testRunner.When("We pass new EmegenlerRole entity to our Insert method with zero id on entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then("Insert method should add new EmegenlerRole entity to db return with success and n" +
                    "ew EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="With using Insert method we can update our exist EmegenlerRole entity")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "With using Insert method we can update our exist EmegenlerRole entity")]
        [Xunit.TraitAttribute("Category", "NormalCase-Insert")]
        public virtual void WithUsingInsertMethodWeCanUpdateOurExistEmegenlerRoleEntity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("With using Insert method we can update our exist EmegenlerRole entity", null, new string[] {
                        "NormalCase-Insert"});
#line 13
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
testRunner.When("We pass EmegenlerRole entity with non zero id to our Insert method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("Insert method should edit EmegenlerRole and save to db after that should return s" +
                    "uccess with updated EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("FeatureTitle", "EmegenlerRoleRepository")]
        [Xunit.TraitAttribute("Description", "If we pass null value to our Insert method, method should throw NullReferenceExce" +
            "ption")]
        [Xunit.TraitAttribute("Category", "ExceptionalCase-Insert")]
        public virtual void IfWePassNullValueToOurInsertMethodMethodShouldThrowNullReferenceException()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If we pass null value to our Insert method, method should throw NullReferenceExce" +
                    "ption", null, new string[] {
                        "ExceptionalCase-Insert"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
testRunner.When("We pass null value to Insert method without EmegenlerRole entity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
testRunner.Then("Insert method should throw NullReferenceException without EmegenlerRole on Return" +
                    "er", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EmegenlerRoleRepositoryFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EmegenlerRoleRepositoryFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
